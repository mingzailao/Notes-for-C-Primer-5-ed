#+TITLE:     C++ Primer Notes
#+AUTHOR:    mingzailao
#+EMAIL:     mingzailao@126.com
#+DATE:      2016-9-11
* Begin
** Writing a Simple C++ Program
*** Example 1.1
#+BEGIN_SRC c++
#include<iostream>
using std::cout;
using std::endl;
int main()
{
    cout<<"Hello world"<<endl;
    return 0;
}
#+END_SRC
*** Compiling and Executing Our Program
**** Comliling
#+BEGIN_SRC sh
  #!/bin/bash
  cd Code
  g++ hello.cpp -o Hello
#+END_SRC
In the next, I just use Automake to compile.

**** Executing 
./Hello
*** Exercise
**** Exercise 1.2: Change the program to return -1. A return value of -1 is often treated as an indicator that the program failed. Recompile and rerun your program to see how your system treats a failure indicator from main.
***** Answer
#+BEGIN_SRC c++
#include<iostream>

int main()
{
    return -1;
}
#+END_SRC
** A First Look at Input/Output
*** Standard Input and Output Objects
The library defines four IO objects:
1. istream:cin
2. ostream:cout
3. cerr
4. clog
*** A Program That Uses the IO Library
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    std::cout<<"Enter two numbers : "<<std::endl;
    int v1=0,v2=0;
    std::cin>>v1>>v2;
    std::cout<<"The sum of "<<v1<<"and "<<v2
        <<" is "<<v1+v2<<std::endl;
    return 0;
}
#+END_SRC 
*** Writing to a Stream
#+BEGIN_SRC c++
std::cout<<"Enter two number"<<std::endl;
#+END_SRC
The $<<$ operator takes two operands:
The left-hand operand must be an ostream object(std::cout); 
the right-hand operand is a value to print.
The operator writes the given value on the given ostream
**** Notes for std::endl
Writing endl has the effect of ending the current line and flushing the buffer.
*** Using Names from the Standard Library
The prefix std:: indicates that the names cout and endl are defined inside the
namespace named std.
*** Reading from a Stream
#+BEGIN_SRC c++
std::cin >> v1 >> v2;
#+END_SRC
The input operator (the $>>$ operator) behaves analogously to the output operator.
It takes an istream as its left-hand operand and an object as its
right-hand operand.
It reads data from the given istream and stores what was read in the given object. 
The input operator returns its left-hand operand as its result.
**** Notes
All the operators just like a function which can return its left-hand operand or its 
right-hand operand.
*** Completing the Program
#+BEGIN_SRC c++
std::cout << "The sum of " << v1 << " and " << v2 
<< " is " << v1 + v2 << std::endl;
#+END_SRC
It prints each of its operands on the standard output.
What is interesting in this example is that the operands are not all the same kinds of values. 
Some operands are string literals, such as "The sum of ". 
Others are int values, such as v1, v2, 
and the result of evaluating the arithmetic expression v1 + v2. 
The library defines versions of the input and output 
operators that handle operands of each of these differing types.
*** EXercise
**** Exercise 1.3: Write a program to print Hello, World on the standard output.
***** Answer
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    std::cout<<"Hello world"<<std::endl;
    return 0;
}

#+END_SRC
**** Exercise 1.4: Our program used the addition operator, +, to add two numbers. Write a program that uses the multiplication operator, *, to print the product instead.
***** Answer
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    std::cout<<"Enter two numbers : "<<std::endl;
    int v1=0,v2=0;
    std::cin>>v1>>v2;
    std::cout<<"The product of "<<v1<<"and "<<v2
        <<" is "<<v1*v2<<std::endl;
    return 0;
}

#+END_SRC
**** Exercise 1.5: We wrote the output in one large statement. Rewrite the program to use a separate statement to print each operand.
***** Answer
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    std::cout<<"Enter two numbers : "<<std::endl;
    int v1=0,v2=0;
    std::cin>>v1>>v2;
    std::cout<<"The sum of "<<std::endl;
    std::cout<<v1<<std::endl;
    std::cout<<"and "<<std::endl;
    std::cout<<v2<<std::endl;
    std::cout<<"is "<<std::endl;
    std::cout<<v1+v2<<std::endl;
    return 0;
}

#+END_SRC
** A Word about Comments
*** Kinds of Comments in C++
1. //
2. /*    */
** Flow of Control
*** The while Statement
**** Example
#+BEGIN_SRC c++
#include <iostream>
int main()
{
    int sum=0,val =1;
    while(val<=10){
        sum+=val;
        ++val;
    }
    std::cout<<"Sum of 1 to 10 is : "<<sum<<std::endl;
    return 0;
}
#+END_SRC
**** Notes
#+BEGIN_SRC c++
val+=1
#+END_SRC
val+=1 \Leftrightarrow  val=val+1
++val  \Leftrightarrow  val=val+1 and the value of ++val is val(after)
val++  \Leftrightarrow  val=val+1 and the value of val++ is val(before)
**** Exercise
***** Exercise 1.9: Write a program that uses a while to sum the numbers from 50 to 100.
****** Answer
#+BEGIN_SRC c++
int sum(int a,int b)
{
    int result=0;
    for(int i=a;i<=b;i++){
        result+=i;
    }
    return result;
}
#include <iostream>
#include "ex_1_9.hpp"
int main()
{
    std::cout<<"Sum of 50 to 100 is : "<<sum(50,100)<<std::endl;
    return 0;
}
#+END_SRC
***** Exercise 1.10: In addition to the ++ operator that adds 1 to its operand, there is a decrement operator (--) that subtracts 1. Use the decrement operator to write a while that prints the numbers from ten down to zero.
****** Answer
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    for(int i=10;i>=0;i--){
        std::cout<<i<<" ";
        std::cout<<std::endl;
    }
    return 0;
}
#+END_SRC
***** Exercise 1.11: Write a program that prompts the user for two integers. Print each number in the range specified by those two integers.
****** Answer
#+BEGIN_SRC c++
#include<iostream>
#include "ex_1_9.hpp"
int main()
{
    int a,b;
    std::cin>>a>>b;
    std::cout<<sum(a,b)<<std::endl;
    return 0;
}
#+END_SRC
*** The for Statement
**** Example
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    int sum=0;
    for(int val=1;val<=10;++val){
        sum+=val;
    }
    std::cout<<"Sum of 1 to 10 is :"<<sum<<std::endl;
    return 0;
}
#+END_SRC
*** Reading an Unknown Number of Inputs
**** Example
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    int sum = 0, value = 0;
    while (std::cin >> value)
        sum += value;
    std::cout << "Sum is: " << sum << std::endl;
    return 0;
}
#+END_SRC
**** Notes
When you do not flushing the buffer, the std::cin will get your inputs.
(in MacOS, ctrl+d)
**** Exercise
***** Exercise 1.16: Write your own version of a program that prints the sum of a set of integers read from cin.
****** Answer
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    int result=0,item;
    while(std::cin>>item){
        result+=item;
        std::cout<<result<<std::endl;
    }
    return 0;
}
#+END_SRC
*** The if Statement
**** Example
#+BEGIN_SRC c++
#include<iostream>
int main()
{
    int currVal=0,val=0;
    if(std::cin>>currVal){
        int cnt=1;
        while(std::cin>>val){
            if(val==currVal)
                ++cnt;
            else{
                std::cout<<currVal<<" occurs "
                         <<cnt<<" times "<<std::endl;
                currVal=val;
                cnt=1;
            }
        }
        std::cout<<currVal<<" occurs "
                 <<cnt<<" times"<<std::endl;
    }
    return 0;
}
#+END_SRC
** Introducing Classes
*** The $Sales\_item$ Class
#+BEGIN_SRC c++
Sales_item item
#+END_SRC
**** Notes
item is an object of Class $Sales\_item$, it own the items and the function of $Sales\_item$
**** Interface 
- Call a function named isbn to fetch the item isbn from a $Sales\_item$ object.
- Use the input (>>) and output (<<) operators to read and write objects of type $Sales\_item$.
- Use the assignment operator (=) to assign one $Sales\_item$ object to another.
- Use the addition operator (+) to add two $Sales\_item$ objects. The two objects must refer to the same ISBN. The result is a new Sales_item object whose ISBN is that of its operands and whose number sold and revenue are the sum of the corresponding values in its operands.
- Use the compound assignment operator (+=) to add one $Sales\_item$ object into another.
**** Exercise
***** Exercise 1.20: http://www.informit.com/title/032174113 contains a copy of $Sales\_item$.h in the Chapter 1 code directory. Copy that file to your working directory. Use it to write a program that reads a set of book sales transactions, writing each transaction to the standard output.
****** Answer
#+BEGIN_SRC c++
#include <iostream>
#include "Sales_item.h"
using std::cin;
using std::cout;
using std::endl;

int main()
{
    for (Sales_item item; cin >> item; cout << item << endl);
    return 0;
}
#+END_SRC
***** Exercise 1.21: Write a program that reads two $Sales\_item$ objects that have the same ISBN and produces their sum.
****** Answer
#+BEGIN_SRC c++
#include <iostream>
#include "Sales_item.h"

using std::cin;
using std::cout;
using std::endl;
using std::cerr;

int main()
{
    Sales_item item1, item2;
    cin >> item1 >> item2;
    if (item1.isbn() == item2.isbn())
        cout << item1 + item2 << endl;
    else
        cerr << "Different ISBN." << endl;
}
#+END_SRC
***** Exercise 1.22: Write a program that reads several transactions for the same ISBN. Write the sum of all the transactions that were read.
****** Answer
#+BEGIN_SRC c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item total;
    if (std::cin >> total)
    {
        Sales_item trans;
        while (std::cin >> trans)
        {
            if (total.isbn() == trans.isbn())
                total += trans;
            else
            {
                std::cout << total << std::endl;
                total = trans;
            }
        }
        std::cout << total << std::endl;
    }
    else
    {
        std::cerr << "No data?!" << std::endl;
        return -1;
    }

    return 0;
}
#+END_SRC
*** A First Look at Member Functions
**** Example
#+BEGIN_SRC c++
#include<iostream>
#include "Sales_item.h"

int main()
{
    Sales_item item1,item2;
    std::cin>>item1>>item2;
    if(item1.isbn()==item2.isbn()){
        std::cout<<item1+item2<<std::endl;
        return 0;
    }
    else{
        std::cerr<<"Data must refer to the same ISBN"
                 <<std::endl;
        return -1;
    }
}
#+END_SRC
**** Notes
#+BEGIN_SRC c++
item1.isbn() == item2.isbn()
#+END_SRC
uses the dot operator (the “.” operator) to say that we want “the isbn member of the object named item1.” 
**** Exercise
***** Exercise 1.23: Write a program that reads several transactions and counts how many transactions occur for each ISBN.
****** Answer
#+BEGIN_SRC c++
#include <iostream>
#include "Sales_item.h"

int main()
{
    Sales_item currItem, valItem;
    if (std::cin >> currItem)
    {
        int cnt = 1;
        while (std::cin >> valItem)
        {
            if (valItem.isbn() == currItem.isbn())
            {
                ++cnt;
            }
            else
            {
                std::cout << currItem 
                          << " occurs " 
                          << cnt 
                          << " times "
                          << std::endl;
                currItem = valItem;
                cnt = 1;
            }
        }
        std::cout << currItem
                  << " occurs "
                  << cnt 
                  << " times " 
                  << std::endl;
    }
    return 0;
}
#+END_SRC
** The Bookstore Program
#+BEGIN_SRC c++
#include<iostream>
#include "Sales_item.h"
int main()
{
    Sales_item total;
    if(std::cin>>total){
        Sales_item trans;
        while(std::cin>>trans){
            if(total.isbn()==trans.isbn())
                total+=trans;
            else{
                std::cout<<total<<std::endl;
                total=trans;
            }
        }
        std::cout<<total<<std::endl;
    }
    else{
        std::cerr<<"No data?!"<<std::endl;
    }
    return 0;
}

#+END_SRC
* Variables and Basic Types
** Primitive Built-in Types
C++ defines a set of primitive types that include the arithmetic types and a special type
named void.
*** Arithmetic Types
The arithmetic types are divided into two categories
- integral types (which include character and boolean types) 
- floating-point types.
\hline
| Type        | Meaning                           | Minimum Size          |
| bool        | boolean                           | NA                    |
| char        | charactor                         | 8 bits                |
| $wchar\_t$  | wide charactor                    | 16 bits               |
| $char16\_t$ | Unicode charactor                 | 16 bits               |
| $char32\_t$ | Unicode charactor                 | 32 bits               |
| short       | short integer                     | 16 bits               |
| int         | integer                           | 16 bits               |
| long        | long integer                      | 32 bits               |
| long long   | long integer                      | 64 bits               |
| float       | single-precision floating-point   | 6 significant digits  |
| double      | double-precision floating-point   | 10 significant digits |
| long double | extended-precision floating-point | 10 significant digits |
**** Notes(Signed and Unsigned Types)
Except for bool and the extended character types, 
the integral types may be signed or unsigned. 
A signed type represents negative or positive numbers (including zero); 
an unsigned type represents only values greater than or equal to zero.
**** Exercise
***** Exercise 2.1: What are the differences between int, long, long long, and short? Between an unsigned and a signed type? Between a float and a double?
****** Answer
- Use int for integer arithmetic. short is usually too small and, in practice, long often has the same size as int. If your data values are larger than the minimum guaranteed size of an int, then use long long. (In a word: short < int < long < long long)
- Use an unsigned type when you know that the values cannot be negative. (In a word: no negative, unsigned.)
- Use double for floating-point computations; float usually does not have enough precision, and the cost of double-precision calculations versus single-precision is negligible. In fact, on some machines, double-precision operations are faster than single. The precision offered by long double usually is unnecessary and often entails considerable run-time cost. (In a word: float < double < long double)
***** Exercise 2.2: To calculate a mortgage payment, what types would you use for the rate, principal, and payment? Explain why you selected each type.
****** Answer
use double, or also float.

The rate most like that: 4.50 \% per year. The principal most like that: 854.36 The payment most like that: 1, 142.36

*** Literals
**** Notes(Character and Character String Literals)
#+BEGIN_SRC c++
'a'     // character literal
"Hello world!"    //string literal
#+END_SRC

** Variables
*** Variable Definitions
#+BEGIN_SRC c++
int sum=0,value,
    units_sold=0;
Sales_item item;
std::string book("0-201-78345-X");
#+END_SRC
**** Initializers
An object that is initialized gets the specified value at the moment it is created. The values used to initialize a variable can be arbitrarily complicated expressions.
**** List Initialization
#+BEGIN_SRC c++
int units_sold = 0;
int units_sold = {0};
int units_sold{0}; 
int units_sold(0);
#+END_SRC
**** Default Initialization
***** Notes
For class,Each class controls how we initialize objects of that class type.
Key: Construct Function
*** Variable Declarations and Definitions
 A declaration makes a name known to the program. A file that wants to use a name defined elsewhere includes a declaration for that name. A definition creates the associated entity.

To obtain a declaration that is not also a definition, we add the extern keyword and may not provide an explicit initializer:
#+BEGIN_SRC c++
extern int i; // declares but does not define i
int j; // declares and defines j
#+END_SRC
in a function, if you want to initialize a variable marked with extren, you will get an error.
*** Identifiers
Identifiers in C++ can be composed of letters, digits, and the underscore character. The language imposes no limit on name length. Identifiers must begin with either a letter or an underscore. Identifiers are case-sensitive; upper- and lowercase letters are distinct:
#+BEGIN_SRC c++
// defines four different int variables
int somename, someName, SomeName, SOMENAME;
#+END_SRC
** Compound Types
A compound type is a type that is defined in terms of another type. C++ has several compound types, two of which—references and pointers—we’ll cover in this chapter.
*** References
A reference defines an alternative name for an object.

A reference type “refers to” another type.

#+BEGIN_SRC c++
int ival = 1024;
int &refVal = ival; // refVal refers to (is another name for) ival 
int &refVal2; // error: a reference must be initialized
#+END_SRC

A reference is not an object
*** Pointers
A Pointers is an object(unlike reference),so Pointers can be assigned and copied;a single pointer can point to several different objects over its lifetime.

A pointer need not be initialized at the time it is defined.

Like other built-in types, pointers defined at block scope have undefined value if they are not initialized.
#+BEGIN_SRC c++
int *ip1,*ip2;\\ ip1 and ip2 are both pointers to int
double dp,*dp2; \\ dp2 is a pointer to double and dp is an object of double
#+END_SRC
**** Taking the Address of an Object
A pointer holds the address of another object. We get the address of an object by usin the address-of operator (the & operator):
#+BEGIN_SRC c++
int ival=42;
int *p=&ival; // p is an pointer object to ival(int)
#+END_SRC
**** Using a Pointer to Access an Object
When a pointer points to an object, we can use the dereference operator (the * operator) to access that object:
#+BEGIN_SRC c++
int ival=42;
int *p=&ival; // p is a pointer object to ival(int object)
cout<<*p // use * get the object to which p points
#+END_SRC
**** Assignment and Pointers
Both pointers and references give indirect access to other objects. However, there are important differences in how they do so. The most important is that a reference is not an object. Once we have defined a reference, there is no way to make that reference refer to a different object. When we use a reference, we always get the object to which the reference was initially bound.
There is no such identity between a pointer and the address that it holds. As with any other (nonreference) variable, when we assign to a pointer, we give the pointer itself a new value. Assignment makes the pointer point to a different object:

The important thing to keep in mind is that assignment changes its left-hand operand.

#+BEGIN_SRC c++
pi=&ival// value in pi is changed; pi now points to ival
*pi=0 // value in ival is changed; pi is unchanged
#+END_SRC
**** void* Pointers
The type void* is a special pointer type that can hold the address of any object. Like any other pointer, a void* pointer holds an address, but the type of the object at that address is unknown:
#+BEGIN_SRC c++
double obj = 3.14, *pd = &obj;
// ok: void* can hold the address value of any data pointer type 
void *pv = &obj; // obj can be an object of any type 
pv = pd; // pv can hold a pointer to any type
#+END_SRC
*** Understanding Compound Type Declarations
It is a common misconception to think that the type modifier (* or &) applies to all the variables defined in a single statement. Part of the problem arises because we can put whitespace between the type modifier and the name being declared:
#+BEGIN_SRC c++
int* p//legal but might be misleading
int* p1, p2; // p1 is a pointer to int; p2 is an int
int *p1, *p2; // both p1 and p2 are pointers to int
#+END_SRC
so we should avoid int* but use int * 
**** Pointers to Pointers
We indicate each pointer level by its own * . That is, we write ** for a pointer to a pointer, *** for a pointer to a pointer to a pointer, and so on:
#+BEGIN_SRC c++
int ival = 1024;
int *pi = &ival; // pi points to an int
int **ppi = &pi; // ppi points to a pointer to an int
#+END_SRC
**** References to Pointers
A reference is not an object. Hence, we may not have a pointer to a reference. However, because a pointer is an object, we can define a reference to a pointer:
#+BEGIN_SRC c++
int i=42;
int *p; // p is a pointer to int
int *&r=p; // r is a reference to pointer(points to int) p
r=&i // r references a pointer, assign &i to r ==makes p points to i;
*r=0 //dereferencing r yields i, the object to which p points; changes i to 0 
#+END_SRC
** Const Qualifier
Sometimes we want to define a variable whose value we know cannot be changed.
We can make a variable unchangeable by defining the variable’s type as const:
#+BEGIN_SRC c++
const int bufsize=512;// the size of the buffer
bufsize=512// error : try to write to const object
#+END_SRC
**** References to const(refers to a const type)
a reference to const cannot be used to change the object to which the reference is bound:
#+BEGIN_SRC c++
const int ci=1024
const int &r1=ci
r1=32// error
int &r2=ci // error : try to let a non-const reference points to a const reference
#+END_SRC
**** Pointers and const
pointer to const and const pointer

pointer to const means you can not change the value of the const object which the pointer points.

const point means that you can not change the pointer(you can not let the pointer change)
**** Top-Level const
We use the term top-level const to indicate that the pointer itself is a const. When a pointer can point to a const object, we refer to that const as a low-level const.
**** constexpr and Constant Expressions
A constant expression is an expression whose value cannot change and that can be evaluated at compile time.
***** constexpr Variables
Under the new standard, we can ask the compiler to verify that a variable is a constant expression by declaring the variable in a constexpr declaration. Variables declared as constexpr are implicitly const and must be initialized by constant expressions:
#+BEGIN_SRC c++
constexpr int mf = 20; // 20 is a constant expression 
constexpr int limit = mf + 1; // mf + 1 is a constant expression 
constexpr int sz = size(); // ok only if size is a constexpr function
#+END_SRC
** Dealing with Types
**** Type Aliases
***** use keyword typedef
#+BEGIN_SRC c++
typedef double wages
typedef wages base,*p // base is a synonym for double, p for double*
#+END_SRC
***** alias declaration
#+BEGIN_SRC c++
using SI = Sales_item; // SI is a synonym for Sales_item
#+END_SRC
**** The auto Type Specifier
Under the new standard, we can let the compiler figure out the type for us by using the auto type specifier.
#+BEGIN_SRC c++
auto item=val1+val2;// 
#+END_SRC
**** The decltype Type Specifier
The new standard introduced a second type specifier, decltype, which returns the type of its operand.
#+BEGIN_SRC c++
decltype(f()) sum = x; // sum has whatever type f returns
#+END_SRC
** Defining Our Own Data Structures


